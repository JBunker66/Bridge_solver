import numpy as np

class Card:

    def __init__(self,number,suit):
        
        # Defines the input suit and card as values that can be more easly delt with
        self.suits = ['C','D','H','S','NT']
        self.cards = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']
        for i,j in enumerate(self.suits):
            if suit == j:
                self.Suit = i
        for i,j in enumerate(self.cards):
            if number == j:
                self.Number = i
        # Defult to NT
        self.Trump = 4

    def Set_Trump(self,trump):
        # Number of trump represents place in suit list 
        for i,j in enumerate(self.suits):
            if trump == j:
                self.Trump = i
    
    def __gt__(self, other_card):
        # Redifines the > symbol to say which card would 'win' 
        if self.Suit == other_card.Suit:
            if self.Number > other_card.Number:
                return True
            else:
                return False
        elif other_card.Suit == self.Trump:
            return False
        else:
            return True
    def __str__(self):
        return 'The {} of {}'.format(self.cards[self.Number],self.suits[self.Suit])        

def Convert_Hand(hand):
    # Converts a list of tuples to a list of cards
    Output_Hand = []
    Spades = []
    Hearts = []
    Dimonds = []
    Clubs = []
    Suits = [Clubs,Dimonds,Hearts,Spades]
    counter = 1
    # Sorts the hand card types and also into lists of the differnt suits for sorting
    for card in hand:
        card_info = [char for char in card]
        card = Card(card_info[0],card_info[1])
        Suits[card.Suit].append(card)
    # Suits the suits into card oder
    for suit in Suits:
        suit.sort(key=lambda x: x.Number)

    # combines adjacent cards into the same value as functionaly equivilent and combines the suits to one hand
    for suit in Suits:
        length = len(suit)-1
        for i,card in enumerate(suit):
            if i == length or card.Number + 1 != suit[i+1].Number:
                Output_Hand.append((card,counter))
                counter = 1
            else:
                counter +=1    
    return Output_Hand

